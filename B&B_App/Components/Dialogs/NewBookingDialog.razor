@using System.ComponentModel
@using System.Reflection
@using B_B_App.Services;
@using B_B_ClassLibrary.Models;
@implements IDisposable
@inject IContractService<Contract> contractService
@inject NewBookingsContainer NewBookingsContainer
@inject LoginManager loginManager
@inject NavigationManager navigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6"> Er du sikker på at du vil booke?</MudText>
    </TitleContent>
    <DialogContent>
        <MudText><b> Rum nummer:</b> @Room.Number</MudText>
        <MudText><b>Pris per nat:</b> @Room.PricePerNight</MudText>
        <MudText><b>Antal senge:</b> @Room.NumberOfBeds</MudText>
        <MudText><b>Antal senge:</b> @Room.NumberOfBeds</MudText>
        <MudText><b>Bed and Breakfast navn:</b> @Location.Name</MudText>
        <MudText><b>Område:</b> @Location.Area</MudText>
        <MudText><b>By:</b> @Location.City</MudText>
        <MudText><b>Adresse:</b> @Location.Address</MudText>
        <MudText><b>Post nummer:</b> @Location.ZipCode</MudText>
        <MudText><b>Fra dato:</b> @Contract.FromDate</MudText>
        <MudText><b>Til dato:</b> @Contract.ToDate</MudText>
        <MudText Typo="Typo.caption">The room will need to be confirmed by the landlord before being reserved. You can view pending bookings on the bookings page</MudText>
        <MudButton @onclick="Book" Color="Color.Primary" Variant="Variant.Filled">Add to pending bookings</MudButton>
        <MudButton @onclick="BookAndGotoBookings" Color="Color.Secondary" Variant="Variant.Filled">Add and go to bookings</MudButton>
        <MudButton @onclick="CancelBooking" Color="Color.Error" Variant="Variant.Filled">Cancel</MudButton>

        <MudText >The booking cannot be completed before the payment has been received</MudText>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Contract Contract { get; set; }
    [Parameter] public Room Room { get; set; }
    [Parameter] public Location Location { get; set; }

    DateTime? from = DateTime.Today;


    protected override void OnInitialized()
    {
        NewBookingsContainer.OnChange += StateHasChanged;
    }



    public void Dispose()
    {
        NewBookingsContainer.OnChange -= StateHasChanged;
    }

    private void ChangePropertyValue()
    {
        NewBookingsContainer.AddContract(Contract);
    }

    void BookAndGotoBookings()
    {
        Contract.RoomId = Room.Id;
        Contract.FromDate = DateTime.Now;
        Contract.ToDate = DateTime.Now;
        Contract.State = ContractState.Pending;
        if (LoginManager.User != null)
        {
            Contract.UserId = LoginManager.User.Id;
        }
        ChangePropertyValue();

        MudDialog.Close(DialogResult.Ok(true));
        navigationManager.NavigateTo("/bookings");
    }

    void Book()
    {
        Contract.RoomId = Room.Id;
        Contract.FromDate = DateTime.Now;
        Contract.ToDate = DateTime.Now;
        Contract.State = ContractState.Pending;
        if (LoginManager.User != null)
        {
            Contract.UserId = LoginManager.User.Id;
        }
        ChangePropertyValue();

        MudDialog.Close(DialogResult.Ok(true));
    }
    void CancelBooking() => MudDialog.Cancel();
}
