@using System.Reflection;
@using System.ComponentModel;
@typeparam TModel

<MudCard>
    <MudCardHeader>
        Rediger information
    </MudCardHeader>
    @if (props.Any())
    {
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Model.Number" For="() => Model.Number" HelperText="Rum nummer" Placeholder="@GetDisplayName(nameof(Model.Number))"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Model.NumberOfBeds" For="() => Model.NumberOfBeds" HelperText="Antal senge" Placeholder="@GetDisplayName(nameof(Model.NumberOfBeds))"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="Model.PricePerNight" For="() => Model.PricePerNight" HelperText="Pris per nat" Placeholder="@GetDisplayName(nameof(Model.PricePerNight))"></MudTextField>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField ReadOnly="true" @bind-Value="Model.Rating" For="() => Model.Rating" HelperText="Rating" Placeholder="@GetDisplayName(nameof(Model.Rating))"></MudTextField>
            </MudItem>
        </MudGrid>

        @if (ShowEditButtons)
        {
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning" @onclick="() => ButtonClicked(1)">Gem ændringer</MudButton>
        }
    }
    @if (Pictures != null)
    {
        <MudGrid>
            @foreach (var item in Pictures)
            {
                <MudItem xs="6">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 indigo darken-5"><MudImage Src="@item.Base64" Height="250" Width="300"></MudImage></MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudCard>

@code {
    [Parameter]
    public Room Model { get; set; }

    [Parameter]
    public bool ShowEditButtons { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, KeyValuePair<bool, Room>>> OnClose { get; set; }

    [Parameter]
    public List<Picture> Pictures { get; set; } = new List<Picture>();

    private List<PropertyInfo> props = new List<PropertyInfo>();
    private void LoadPropertyNames()
    {
        props = Model.GetType().GetProperties().ToList();
        StateHasChanged();
    }

    private void ButtonClicked(int input)
    {
        if (Model == null)
            return;


        switch (input)
        {
            case 1:
                OnClose.InvokeAsync(new KeyValuePair<string, KeyValuePair<bool, Room>>("save", new KeyValuePair<bool, Room>(true, Model)));
                break;

            default:
                break;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Pictures == null)
            Pictures = new List<Picture>();

        LoadPropertyNames();
    }

    private string GetDisplayName(string name)
    {
        MemberInfo? property = typeof(Room).GetProperty(name);
        if (property == null)
            return "";
        try
        {
            var attribute = property
            .GetCustomAttributes(typeof(DisplayNameAttribute), true);
            if (attribute.Length > 0)
                return attribute.Cast<DisplayNameAttribute>().Single().DisplayName;
        }
        catch (Exception ex)
        {
            var test = ex;
        }

        return "";
    }
}
