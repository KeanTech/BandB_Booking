@page "/roomEditor/{RoomId:int}"
@using System.ComponentModel;
@using System.Reflection;
@inject IRoomService<Room> _roomService
@inject IPictureService _pictureService
@inject IAccessoryService _accessoryService
@inject LoginManager _loginManager
@inject ISnackbar _snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.button">Rediger information</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField @bind-Value="_room.Number" For="() => _room.Number" Variant="Variant.Filled" HelperText="Rum nummer" Placeholder="@GetDisplayName(nameof(_room.Number))"></MudTextField>
            </MudItem>

            <MudItem xs="6">
                <MudTextField @bind-Value="_room.NumberOfBeds" For="() => _room.NumberOfBeds" Variant="Variant.Filled" HelperText="Antal senge" Placeholder="@GetDisplayName(nameof(_room.NumberOfBeds))"></MudTextField>
            </MudItem>

            <MudItem xs="6">
                <MudTextField @bind-Value="_room.PricePerNight" For="() => _room.PricePerNight" Variant="Variant.Filled" HelperText="Pris per nat" Placeholder="@GetDisplayName(nameof(_room.PricePerNight))"></MudTextField>
            </MudItem>

            <MudItem xs="6">
                <MudTextField ReadOnly="true" @bind-Value="_room.Rating" For="() => _room.Rating" Variant="Variant.Text" HelperText="Rating" Placeholder="@GetDisplayName(nameof(_room.Rating))"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Surface" Color="Color.Warning" @onclick="() => SaveChanges()">Gem ændringer</MudButton>
            </MudItem>
        </MudGrid>

    </MudCardContent>

</MudCard>

<MudDivider DividerType="DividerType.FullWidth"></MudDivider>

<MudCard>
    <MudCardContent>
        <MudGrid>

            <MudItem>
                <MudGrid>
                    <MudItem xs="4">
                        <DropDown TItem="RoomAccessory" OnSelected="AccessorySelected">
                            <InitialTip>Select Accessory</InitialTip>
                            <ChildContent>

                                @foreach (var item in _accessories)
                                {
                                    <DropDownItem Item="item">@item.Type</DropDownItem>
                                }

                            </ChildContent>
                        </DropDown>
                    </MudItem>

                    <MudItem xs="12">
                        <AccessoryCreatorDisplay ItemDeleted="AccessoryDeleted" AbleToDelete="true" RoomAccessories="_roomAccessories"></AccessoryCreatorDisplay>

                    </MudItem>
                </MudGrid>


            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudDivider DividerType="DividerType.FullWidth" Absolute="true" Light="true"></MudDivider>

<MudCard>
    @if (_pictures.Any())
    {
        <MudCardContent>

            <MudGrid>
                @foreach (var item in _pictures)
                {
                    <MudItem xs="6">

                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 indigo darken-5"><MudImage Src="@item.Base64" Height="250" Width="300" /></MudPaper>
                        <MudGrid>
                            <MudItem xs="4">

                                <MudIconButton @onclick="() => DeletePicture(item.Id)" Style="margin:1px 10px 1px 1px" Color="Color.Error" Size="Size.Small" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                                @*<MudToggleIconButton Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Size="Size.Small" Color="@Color.Error" Title="Off" ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="@Color.Success" ToggledTitle="Off" @onclick="() => SelectPicture(item.Id)"/>*@
                            </MudItem>
                            <MudItem xs="4">

                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }
            </MudGrid>
        </MudCardContent>
    }
</MudCard>

<MudGrid Style="padding:2px 2px 2px 2px; margin:0px 12px 0px 0px">
    <MudItem xs="12">
        <InputFile OnChange="@AddPicture" single accept=".jpg,.jpeg,.png,.PNG" style="margin:2px 2px 2px 2px" />
    </MudItem>

    <MudItem xs="12">
        <MudImage Style="border:solid 1px black;" Src="@_addedPicture.Base64"></MudImage>
    </MudItem>

    <MudItem xs="12">
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FileUpload" @onclick="UploadPicture">Upload</MudButton>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public int RoomId { get; set; }

    #region Fields
    private Room _room = new Room();

    private User? _user;
    private List<Picture> _pictures = new List<Picture>();
    private Picture _addedPicture = new Picture();
    private List<Picture> _picturesToDelete = new List<Picture>();
    private List<RoomAccessory> _roomAccessories = new List<RoomAccessory>();
    private List<RoomAccessory> _accessories = new List<RoomAccessory>();
    private List<RoomAccessory> _accessoriesToBeRemoved = new List<RoomAccessory>();
    private RoomAccessory _selectedAccessory;
    private IBrowserFile? file;
    private ErrorManager _errorManager;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        _user = LoginManager.User;
        _errorManager = new ErrorManager(_snackbar);

        if (RoomId == 0)
            return;

        try
        {
            //if (loginManager.IsLandLord(_user.Id))
            _room = await _roomService.Get(RoomId);
            _accessories = await _accessoryService.GetAllAccessories();
            _roomAccessories = (await _roomService.GetRoomAccessories(RoomId)).Accessories;
            _pictures = await _pictureService.GetRoomPictures(RoomId);
        }
        catch (Exception)
        {
            _errorManager.InfoBar("Error while loading data", Variant.Text, Severity.Error);
        }
    }

    private void AccessorySelected(RoomAccessory roomAccessory)
    {
        _selectedAccessory = roomAccessory;
        if (_roomAccessories.Contains(roomAccessory) == false)
            _roomAccessories.Add(roomAccessory);
    }

    private void AccessoryDeleted(RoomAccessory roomAccessory)
    {
        _accessoriesToBeRemoved.Add(roomAccessory);
    }

    private async void SaveChanges()
    {
        if (_room.Id == 0)
            await _roomService.Create(_room);
        else
            await _roomService.Update(_room);

        _room.Accessories = _roomAccessories;
        await _roomService.AddAccessoriesToRoom(_room);

        if (_accessoriesToBeRemoved.Any())
        {
            _room.Accessories = _accessoriesToBeRemoved;
            await _roomService.RemoveAccessoryFromRoom(_room);
        }

        StateHasChanged();
    }

    private string GetDisplayName(string name)
    {
        MemberInfo? property = typeof(Room).GetProperty(name);
        if (property == null)
            return "";
        try
        {
            var attribute = property
            .GetCustomAttributes(typeof(DisplayNameAttribute), true);
            if (attribute.Length > 0)
                return attribute.Cast<DisplayNameAttribute>().Single().DisplayName;
        }
        catch (Exception ex)
        {
            var test = ex;
        }

        return "";
    }

    #region Picture functions
    private void SelectPicture(int id)
    {
        var selectedPicture = _pictures.FirstOrDefault(x => x.Id == id);
        if (selectedPicture == null)
            return;

        _picturesToDelete.Add(selectedPicture);
    }

    private async void DeletePicture(int id)
    {
        var selectedPicture = _pictures.FirstOrDefault(x => x.Id == id);
        if (selectedPicture == null)
            return;

        await _pictureService.DeleteRoomPictures(new List<Picture>() { selectedPicture });
        _pictures.Remove(selectedPicture);

        StateHasChanged();
    }

    private async void DeletePictures()
    {
        if (_picturesToDelete.Any())
            await _pictureService.DeleteRoomPictures(_picturesToDelete);
    }

    private async void AddPicture(InputFileChangeEventArgs e)
    {
        Picture imageFile = await ImageHandling.GetImageFile(e.File, _room.Id);
        if (string.IsNullOrEmpty(imageFile.Base64))
            return;

        _addedPicture = imageFile;
        StateHasChanged();
    }

    private async void UploadPicture()
    {
        if (_addedPicture != null)
        {
            await _pictureService.AddRoomPictures(new List<Picture>() { _addedPicture });
        }
        _pictures = await _pictureService.GetRoomPictures(RoomId);

        StateHasChanged();
    }
    #endregion


}
