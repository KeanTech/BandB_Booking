@page "/Bookings"
@implements IDisposable
@inject NewBookingsContainer NewBookingsContainer
@inject IContractService<Contract> contractService

<MudCard>
    <MudCardHeader><h6>Rooms you have selected to book (@NewBookingsContainer.newBookings.Count)</h6> </MudCardHeader>
    <MudCardContent>
        @foreach (var booking in NewBookingsContainer.newBookings)
        {
            <MudCard>
                <MudText><b>Room ID: </b>@booking.RoomId</MudText>
                <MudText><b>From:</b> @booking.FromDate</MudText>
                <MudText><b>To:</b> @booking.ToDate</MudText>
                <MudText><b>Signed on:</b> @booking.SignedDate</MudText>
                <MudButton @onclick="() => OnCancelSelectedBooking(booking)" Variant="Variant.Filled" Color="Color.Error">Cancel Pending booking</MudButton>
            </MudCard>
            <br>
        }
    </MudCardContent>
</MudCard>
@if (NewBookingsContainer.newBookings.Count > 0)
{
    <MudButton @onclick="OnSubmitBooking" Variant="Variant.Filled" Color="Color.Success">Submit your bookings</MudButton>
}

<MudCard>
    <MudCardHeader><h6>Pending bookings (@_pendingUserContracts.Count)</h6></MudCardHeader>
    <MudCardContent>
        @foreach (var booking in _pendingUserContracts)
        {
            <MudCard>

                <MudText><b>From:</b> @booking.FromDate</MudText>
                <MudText><b>To:</b> @booking.ToDate</MudText>
                <MudText><b>Signed on:</b> @booking.SignedDate</MudText>
            </MudCard>
            <br>
        }
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader><h6>Your bookings (@_userContracts.Count)</h6> </MudCardHeader>
    <MudCardContent>
        @foreach (var booking in _userContracts)
        {
            <MudCard>

                <MudText><b>From:</b> @booking.FromDate</MudText>
                <MudText><b>To:</b> @booking.ToDate</MudText>
                <MudText><b>Signed on:</b> @booking.SignedDate</MudText>
            </MudCard>
            <br>
        }
    </MudCardContent>
</MudCard>


@code {
    private List<Contract> _userContracts = new List<Contract>();
    private List<Contract> _pendingUserContracts = new List<Contract>();
    private User _user = LoginManager.User;

    protected override async void OnInitialized()
    {
        _userContracts = await contractService.GetUserContracts(_user.Id);
        _pendingUserContracts = await contractService.GetPendingContracts(_user.Id);

        var first = _userContracts[0];
        StateHasChanged();

        NewBookingsContainer.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    public void OnCancelSelectedBooking(Contract contract)
    {
        NewBookingsContainer.newBookings.Remove(contract);
        StateHasChanged();
    }

    public async void OnSubmitBooking()
    {
        var returnedContracts = await contractService.Create(NewBookingsContainer.newBookings);
        _pendingUserContracts.AddRange(returnedContracts);
        NewBookingsContainer.newBookings.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        NewBookingsContainer.OnChange -= StateHasChanged;
    }
}
