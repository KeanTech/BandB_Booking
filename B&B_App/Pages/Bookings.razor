@page "/Bookings"
@implements IDisposable
@inject NewBookingsContainer NewBookingsContainer
@inject IContractService<Contract> contractService

<MudCard>
    <MudCardHeader>Pending bookings</MudCardHeader>
    <MudCardContent>
        @foreach (var booking in NewBookingsContainer.newBookings)
        {
            <MudText>Booking ID: @booking.Id</MudText>
            <MudText>User ID: @booking.UserId</MudText>
            <MudText>From: @booking.FromDate</MudText>
            <MudText>To: @booking.ToDate</MudText>
            <MudText>Signed on: @booking.</MudText>
            <MudButton @onclick="OnSubmitBooking" Variant="Variant.Filled" Color="Color.Success">Submit booking</MudButton>
            <MudButton @onclick="OnCancelPendingBooking" Variant="Variant.Filled" Color="Color.Error">Cancel Pending booking</MudButton>
        }
    </MudCardContent>
</MudCard>

<MudCard>
    <MudCardHeader>Your bookings</MudCardHeader>
    <MudCardContent>
        
    </MudCardContent>
</MudCard>


@code {
    private List<Contract> _userContracts = new List<Contract>();

    protected override async void OnInitialized()
    {
        //_userContracts = await contractService.

        NewBookingsContainer.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    public void OnCancelPendingBooking()
    {
        
    }

    public async void OnSubmitBooking()
    {
        await contractService.Create(NewBookingsContainer.newBookings);
    }

    public void Dispose()
    {
        NewBookingsContainer.OnChange -= StateHasChanged;
    }
}
